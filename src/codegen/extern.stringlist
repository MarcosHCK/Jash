%{
/* Copyright 2023 MarcosHCK
 * Copyright 2023 DavierSB
 * This file is part of JASH.
 *
 * JASH is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JASH is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JASH. If not, see <http://www.gnu.org/licenses/>.
 */
#include <config.h>
#include <codegen/codegen.h>
#include <codegen/context.h>
#include <glib-object.h>
#include <unistd.h>

typedef struct _Closure Closure;
G_LOCK_DEFINE_STATIC (lowtable);

struct _Closure
{
  GClosure parent;
  GCallback callback;
  JBlock block;
};
%}

%struct-type
%define hash-function-name j_extern_hash
%define lookup-function-name j_extern_lookup
%compare-strncmp
%omit-struct-type

struct _JExtern {};
%%
execvp, G_CALLBACK (execvp)
fork, G_CALLBACK (fork)
pipe, G_CALLBACK (pipe)
%%

static inline gboolean adjust (Dst_DECL, gint32* offset, gconstpointer address, gconstpointer callback, int type)
{
  gsize address_ = GPOINTER_TO_SIZE (address);
  gsize callback_ = GPOINTER_TO_SIZE (callback);
  gssize offset_ = 0;

  G_STATIC_ASSERT (sizeof (gsize) == GLIB_SIZEOF_VOID_P);

  if (!type)
    {
      if (callback_ > (gsize) G_MAXINT32)
        return FALSE;
      else
        *offset = (gint32) callback_;
    }
  else
    {
      offset_ = callback_ - address_ - 4;

      if (offset_ > (gssize) G_MAXINT32
        || offset_ < (gssize) G_MININT32)
        return FALSE;
      else
        *offset = (gint32) offset_;
    }
return TRUE;
}

static inline gboolean lowget (Dst_DECL, gint32* offset, gconstpointer address, gpointer callback, int type)
{
  static GHashTable* table = NULL;
  const GHashFunc func1 = (GHashFunc) g_direct_hash;
  const GEqualFunc func2 = (GEqualFunc) g_direct_equal;
  const GDestroyNotify notify = (GDestroyNotify) g_closure_unref;

  GClosure* gc = NULL;
  Closure* jc = NULL;
  int result = 0;
  size_t sz = 0;

  G_LOCK (lowtable);
  table = (table) ? table : g_hash_table_new_full (func1, func2, NULL, notify);

  if ((jc = g_hash_table_lookup (table, callback)) == NULL)
    {
      JContext context = {0};

      j_context_init (&context);
      j_context_ljmp (&context, callback);

      gc = g_closure_new_simple (sizeof (Closure), NULL);
      jc = (Closure*) gc;

      if (G_LIKELY (gc->floating))
        {
          g_closure_ref (gc);
          g_closure_sink (gc);
        }

      if ((result = dasm_link (&context, &sz)), G_UNLIKELY (result != 0))
        g_error ("(" G_STRLOC "): dasm_link ()!");

      j_block_init (&jc->block, sz);
      g_closure_add_finalize_notifier (gc, &jc->block, (GClosureNotify) j_block_clear);

      if ((result = dasm_encode (&context, j_block_ptr (&jc->block))), G_UNLIKELY (result != 0))
        g_error ("(" G_STRLOC "): dasm_encode ()!");

      jc->callback = G_CALLBACK (context.labels [J_CONTEXT_LABEL_MAIN]);

      g_hash_table_insert (table, callback, gc);
      j_block_protect (&jc->block);
      j_context_clear (&context);
    }

  G_UNLOCK (lowtable);
return adjust (Dst, offset, address, jc->callback, type);
}

const gint32 j_extern_search (Dst_DECL, gconstpointer address, const gchar* name, int type)
{
  JExtern* extern_ = NULL;
  gboolean good = FALSE;
  gint32 offset = 0;

  if ((extern_ = (gpointer) j_extern_lookup (name, strlen (name))) == NULL)
    g_error ("(" G_STRLOC "): Unknown extern '%s'", name);
  if ((good = (gboolean) adjust (Dst, &offset, address, extern_->address, type)) == FALSE)
  if ((good = (gboolean) lowget (Dst, &offset, address, extern_->address, type)) == FALSE)
    g_error ("(" G_STRLOC "): Extern '%s' offset above 2 GB limit", name);
return (offset);
}
