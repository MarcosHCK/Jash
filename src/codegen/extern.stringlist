%{
/* Copyright 2023 MarcosHCK
 * Copyright 2023 DavierSB
 * This file is part of JASH.
 *
 * JASH is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JASH is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JASH. If not, see <http://www.gnu.org/licenses/>.
 */
#include <config.h>
#include <codegen/codegen.h>
#include <codegen/context.h>
#include <codegen/externs.h>
#include <glib/gstdio.h>

G_LOCK_DEFINE_STATIC (lowtable);
%}

%struct-type
%define hash-function-name j_extern_hash
%define lookup-function-name j_extern_lookup
%compare-strncmp
%omit-struct-type

struct _JExtern {};
%%
g_close, J_CALLBACK (g_close)
g_error_free, J_CALLBACK (g_error_free)
g_malloc, J_CALLBACK (g_malloc)
g_propagate_error, J_CALLBACK (g_propagate_error)
g_queue_push_head, J_CALLBACK (g_queue_push_head)
g_queue_push_tail, J_CALLBACK (g_queue_push_tail)
j_chdir, J_CALLBACK (j_chdir)
j_dup2, J_CALLBACK (j_dup2)
j_execvp, J_CALLBACK (j_execvp)
j_fork, J_CALLBACK (j_fork)
j_open, J_CALLBACK (j_open)
j_pipe_clear_many, J_CALLBACK (j_pipe_clear_many)
j_pipe_init_many, J_CALLBACK (j_pipe_init_many)
j_parse_int, J_CALLBACK (j_parse_int)
j_set_closure_error_exit, J_CALLBACK (j_set_closure_error_exit)
%%

static void j_block_free (JBlock* block)
{
  j_block_clear (block);
  g_slice_free (JBlock, block);
}

static inline gboolean adjust (Dst_DECL, gint32* offset, gconstpointer address, gconstpointer callback, int type)
{
  gsize address_ = GPOINTER_TO_SIZE (address);
  gsize callback_ = GPOINTER_TO_SIZE (callback);
  gssize offset_ = 0;

  G_STATIC_ASSERT (sizeof (gsize) == GLIB_SIZEOF_VOID_P);

  if (!type)
    {
      if (callback_ > (gsize) G_MAXINT32)
        return FALSE;
      else
        *offset = (gint32) callback_;
    }
  else
    {
      offset_ = callback_ - address_ - 4;

      if (offset_ > (gssize) G_MAXINT32
        || offset_ < (gssize) G_MININT32)
        return FALSE;
      else
        *offset = (gint32) offset_;
    }
return TRUE;
}

static inline gboolean lowget (Dst_DECL, gint32* offset, gconstpointer address, gpointer callback, int type)
{
  static GHashTable* table = NULL;
  const GHashFunc func1 = (GHashFunc) g_direct_hash;
  const GEqualFunc func2 = (GEqualFunc) g_direct_equal;
  const GDestroyNotify notify = (GDestroyNotify) j_block_free;

  JBlock* block = NULL;
  int result = 0;
  size_t sz = 0;

  G_LOCK (lowtable);
  table = (table) ? table : g_hash_table_new_full (func1, func2, NULL, notify);

  if ((block = g_hash_table_lookup (table, callback)) == NULL)
    {
      JContext context = {0};
      JTag tag = {0};
      gint entry;

      j_context_init (&context);
      j_context_emit_absolute_jump (&context, callback, &tag);

      if ((result = dasm_link (&context, &sz)), G_UNLIKELY (result != 0))
        g_error ("(" G_STRLOC "): dasm_link ()!");

      j_block_init (block = g_slice_new (JBlock), sz);

      if ((result = dasm_encode (&context, j_block_ptr (block))), G_UNLIKELY (result != 0))
        g_error ("(" G_STRLOC "): dasm_encode ()!");

      if ((entry = j_tag_as_offset (&context, &tag)), G_UNLIKELY (entry != 0))
        g_error ("(" G_STRLOC "): WTF?");

      g_hash_table_insert (table, callback, block);
      j_block_protect (block);
      j_context_clear (&context);
    }

  G_UNLOCK (lowtable);
return adjust (Dst, offset, address, j_block_ptr (block), type);
}

const gint32 j_extern_search (Dst_DECL, gconstpointer address, const gchar* name, int type)
{
  JExtern* extern_ = NULL;
  gboolean good = FALSE;
  gint32 offset = 0;

  if ((extern_ = (gpointer) j_extern_lookup (name, strlen (name))) == NULL)
    g_error ("(" G_STRLOC "): Unknown extern '%s'", name);
  if ((good = (gboolean) adjust (Dst, &offset, address, extern_->address, type)) == FALSE)
  if ((good = (gboolean) lowget (Dst, &offset, address, extern_->address, type)) == FALSE)
    g_error ("(" G_STRLOC "): Extern '%s' offset above 2 GB limit", name);
return (offset);
}
