%{
/* Copyright 2023 MarcosHCK
 * Copyright 2023 DavierSB
 * This file is part of JASH.
 *
 * JASH is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JASH is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JASH. If not, see <http://www.gnu.org/licenses/>.
 */
#include <config.h>
#include <codegen/codegen.h>
#include <codegen/context.h>
#include <codegen/system.h>
#include <fcntl.h>
#include <glib/gstdio.h>
#include <glib-object.h>
#include <sys/types.h>
#include <sys/stat.h>

static void j_fail_with_errno (int errno_, const gchar* fmt, ...) G_GNUC_NORETURN;
static void j_fail_with_errno (int errno_, const gchar* fmt, ...)
{
  gchar* value;
  int errval;
  va_list l;

  va_start (l, fmt);
  errval = !errno_ ? errno : errno_;
  value = g_strdup_vprintf (fmt, l);
  va_end (l);

  g_error ("%s (%s)", value, g_strerror (errval));
  g_free (value);
}

static int j_get_errno ()
{
  /*
   * errno could be a little tricky because
   * on some it is defined as a function which
   * returns a pointer, but on others (i.e Windows!!)
   * it is defined as an extern pointer (say, an
   * static variable with extern linkage).
   * This changed with C11 adoption, which forces
   * errno to be a macro which expands into a
   * thread-local (uff) modifiable lvalue.
   */
  return errno;
}

static gint detectbase (const gchar* value, const gchar** begin)
{
  if (g_utf8_get_char (value) == (gunichar) '-')
    return detectbase (g_utf8_next_char (value), begin);
  else
    {
      gchar* n = g_utf8_next_char (value);
      gunichar c1 = g_utf8_get_char (value);
      gunichar c2 = g_utf8_get_char (n);

      if (c1 != (gunichar) '0')
        return (*begin = value, 10);
      else
        {
          switch (c2)
            {
              case (gunichar) 'b': return (*begin = g_utf8_next_char (n), 2);
              case (gunichar) 'o': return (*begin = g_utf8_next_char (n), 8);
              case (gunichar) 'd': return (*begin = g_utf8_next_char (n), 10);
              case (gunichar) 'x': return (*begin = g_utf8_next_char (n), 16);
              default: return (*begin = value, 10);
            }
        }
    }
}

static gint j_ascii_parseint (const gchar* value, GError** error)
{
  const gchar* number = NULL;
  const gint base = detectbase (value, &number);
  gint64 result = -1;

  g_ascii_string_to_signed (number, base, G_MININT, G_MAXINT, &result, error);
return (gint) result;
}

G_LOCK_DEFINE_STATIC (lowtable);
%}

%struct-type
%define hash-function-name j_extern_hash
%define lookup-function-name j_extern_lookup
%compare-strncmp
%omit-struct-type

struct _JExtern {};
%%
close, J_CALLBACK (close)
chdir, J_CALLBACK (chdir)
dup2, J_CALLBACK (dup2)
execvp, J_CALLBACK (execvp)
exit, J_CALLBACK (exit)
fork, J_CALLBACK (fork)
g_propagate_error, J_CALLBACK (g_propagate_error)
g_queue_push_head, J_CALLBACK (g_queue_push_head)
g_queue_push_tail, J_CALLBACK (g_queue_push_tail)
j_ascii_parseint, J_CALLBACK (j_ascii_parseint)
j_set_closure_error_exit, J_CALLBACK (j_set_closure_error_exit)
j_fail_with_errno, J_CALLBACK (j_fail_with_errno)
j_get_errno, J_CALLBACK (j_get_errno)
open, J_CALLBACK (open)
pipe, J_CALLBACK (pipe)
%%

static void j_block_free (JBlock* block)
{
  j_block_clear (block);
  g_slice_free (JBlock, block);
}

static inline gboolean adjust (Dst_DECL, gint32* offset, gconstpointer address, gconstpointer callback, int type)
{
  gsize address_ = GPOINTER_TO_SIZE (address);
  gsize callback_ = GPOINTER_TO_SIZE (callback);
  gssize offset_ = 0;

  G_STATIC_ASSERT (sizeof (gsize) == GLIB_SIZEOF_VOID_P);

  if (!type)
    {
      if (callback_ > (gsize) G_MAXINT32)
        return FALSE;
      else
        *offset = (gint32) callback_;
    }
  else
    {
      offset_ = callback_ - address_ - 4;

      if (offset_ > (gssize) G_MAXINT32
        || offset_ < (gssize) G_MININT32)
        return FALSE;
      else
        *offset = (gint32) offset_;
    }
return TRUE;
}

static inline gboolean lowget (Dst_DECL, gint32* offset, gconstpointer address, gpointer callback, int type)
{
  static GHashTable* table = NULL;
  const GHashFunc func1 = (GHashFunc) g_direct_hash;
  const GEqualFunc func2 = (GEqualFunc) g_direct_equal;
  const GDestroyNotify notify = (GDestroyNotify) j_block_free;

  JBlock* block = NULL;
  int result = 0;
  size_t sz = 0;

  G_LOCK (lowtable);
  table = (table) ? table : g_hash_table_new_full (func1, func2, NULL, notify);

  if ((block = g_hash_table_lookup (table, callback)) == NULL)
    {
      JContext context = {0};
      JBranchChain branch = {0};
      gint entry;

      j_context_init (&context);
      j_context_emit_ljmp (&context, callback, &branch);

      if ((result = dasm_link (&context, &sz)), G_UNLIKELY (result != 0))
        g_error ("(" G_STRLOC "): dasm_link ()!");

      j_block_init (block = g_slice_new (JBlock), sz);

      if ((result = dasm_encode (&context, j_block_ptr (block))), G_UNLIKELY (result != 0))
        g_error ("(" G_STRLOC "): dasm_encode ()!");

      if ((entry = dasm_getpclabel (&context, branch.directpc)), G_UNLIKELY (entry != 0))
        g_error ("(" G_STRLOC "): WTF?");

      g_hash_table_insert (table, callback, block);
      j_block_protect (block);
      j_context_clear (&context);
    }

  G_UNLOCK (lowtable);
return adjust (Dst, offset, address, j_block_ptr (block), type);
}

const gint32 j_extern_search (Dst_DECL, gconstpointer address, const gchar* name, int type)
{
  JExtern* extern_ = NULL;
  gboolean good = FALSE;
  gint32 offset = 0;

  if ((extern_ = (gpointer) j_extern_lookup (name, strlen (name))) == NULL)
    g_error ("(" G_STRLOC "): Unknown extern '%s'", name);
  if ((good = (gboolean) adjust (Dst, &offset, address, extern_->address, type)) == FALSE)
  if ((good = (gboolean) lowget (Dst, &offset, address, extern_->address, type)) == FALSE)
    g_error ("(" G_STRLOC "): Extern '%s' offset above 2 GB limit", name);
return (offset);
}
